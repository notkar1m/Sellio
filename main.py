# coding=utf8
import datetime
import sys
from flask import *
import hashlib
import json
import random
import requests
from shortuuid import uuid
import os
import shutil
import time
from countryinfo import CountryInfo
import pymongo
app = Flask(__name__)
client = pymongo.MongoClient("mongodb+srv://admin:admin@cluster0.zcxa8.mongodb.net/db?retryWrites=true&w=majority&ssl=true&ssl_cert_reqs=CERT_NONE")
db = client["db"]

app.config["SECRET_KEY"] = "SDFL:JSDFLKJSDFlJKSDFlkj"


#region HELPERS
countries = {'Ascension Island': 'ðŸ‡¦ðŸ‡¨', 'Andorra': 'ðŸ‡¦ðŸ‡©', 'United Arab Emirates': 'ðŸ‡¦ðŸ‡ª', 'Afghanistan': 'ðŸ‡¦ðŸ‡«', 'Antigua & Barbuda': 'ðŸ‡¦ðŸ‡¬', 'Anguilla': 'ðŸ‡¦ðŸ‡®', 'Albania': 'ðŸ‡¦ðŸ‡±', 'Armenia': 'ðŸ‡¦ðŸ‡²', 'Angola': 'ðŸ‡¦ðŸ‡´', 'Antarctica': 'ðŸ‡¦ðŸ‡¶', 'Argentina': 'ðŸ‡¦ðŸ‡·', 'American Samoa': 'ðŸ‡¦ðŸ‡¸', 'Austria': 'ðŸ‡¦ðŸ‡¹', 'Australia': 'ðŸ‡¦ðŸ‡º', 'Aruba': 'ðŸ‡¦ðŸ‡¼', 'Ã…land Islands': 'ðŸ‡¦ðŸ‡½', 'Azerbaijan': 'ðŸ‡¦ðŸ‡¿', 'Bosnia & Herzegovina': 'ðŸ‡§ðŸ‡¦', 'Barbados': 'ðŸ‡§ðŸ‡§', 'Bangladesh': 'ðŸ‡§ðŸ‡©', 'Belgium': 'ðŸ‡§ðŸ‡ª', 'Burkina Faso': 'ðŸ‡§ðŸ‡«', 'Bulgaria': 'ðŸ‡§ðŸ‡¬', 'Bahrain': 'ðŸ‡§ðŸ‡­', 'Burundi': 'ðŸ‡§ðŸ‡®', 'Benin': 'ðŸ‡§ðŸ‡¯', 'St. BarthÃ©lemy': 'ðŸ‡§ðŸ‡±', 'Bermuda': 'ðŸ‡§ðŸ‡²', 'Brunei': 'ðŸ‡§ðŸ‡³', 'Bolivia': 'ðŸ‡§ðŸ‡´', 'Caribbean Netherlands': 'ðŸ‡§ðŸ‡¶', 'Brazil': 'ðŸ‡§ðŸ‡·', 'Bahamas': 'ðŸ‡§ðŸ‡¸', 'Bhutan': 'ðŸ‡§ðŸ‡¹', 'Bouvet Island': 'ðŸ‡§ðŸ‡»', 'Botswana': 'ðŸ‡§ðŸ‡¼', 'Belarus': 'ðŸ‡§ðŸ‡¾', 'Belize': 'ðŸ‡§ðŸ‡¿', 'Canada': 'ðŸ‡¨ðŸ‡¦', 'Cocos (Keeling) Islands': 'ðŸ‡¨ðŸ‡¨', 'Congo - Kinshasa': 'ðŸ‡¨ðŸ‡©', 'Central African Republic': 'ðŸ‡¨ðŸ‡«', 'Congo - Brazzaville': 'ðŸ‡¨ðŸ‡¬', 'Switzerland': 'ðŸ‡¨ðŸ‡­', 'CÃ´te dâ€™Ivoire': 'ðŸ‡¨ðŸ‡®', 'Cook Islands': 'ðŸ‡¨ðŸ‡°', 'Chile': 'ðŸ‡¨ðŸ‡±', 'Cameroon': 'ðŸ‡¨ðŸ‡²', 'China': 'ðŸ‡¨ðŸ‡³', 'Colombia': 'ðŸ‡¨ðŸ‡´', 'Clipperton Island': 'ðŸ‡¨ðŸ‡µ', 'Costa Rica': 'ðŸ‡¨ðŸ‡·', 'Cuba': 'ðŸ‡¨ðŸ‡º', 'Cape Verde': 'ðŸ‡¨ðŸ‡»', 'CuraÃ§ao': 'ðŸ‡¨ðŸ‡¼', 'Christmas Island': 'ðŸ‡¨ðŸ‡½', 'Cyprus': 'ðŸ‡¨ðŸ‡¾', 'Czechia': 'ðŸ‡¨ðŸ‡¿', 'Germany': 'ðŸ‡©ðŸ‡ª', 'Diego Garcia': 'ðŸ‡©ðŸ‡¬', 'Djibouti': 'ðŸ‡©ðŸ‡¯', 'Denmark': 'ðŸ‡©ðŸ‡°', 'Dominica': 'ðŸ‡©ðŸ‡²', 'Dominican Republic': 'ðŸ‡©ðŸ‡´', 'Algeria': 'ðŸ‡©ðŸ‡¿', 'Ceuta & Melilla': 'ðŸ‡ªðŸ‡¦', 'Ecuador': 'ðŸ‡ªðŸ‡¨', 'Estonia': 'ðŸ‡ªðŸ‡ª', 'Egypt': 'ðŸ‡ªðŸ‡¬', 'Western Sahara': 'ðŸ‡ªðŸ‡­', 'Eritrea': 'ðŸ‡ªðŸ‡·', 'Spain': 'ðŸ‡ªðŸ‡¸', 'Ethiopia': 'ðŸ‡ªðŸ‡¹', 'European Union': 'ðŸ‡ªðŸ‡º', 'Finland': 'ðŸ‡«ðŸ‡®', 'Fiji': 'ðŸ‡«ðŸ‡¯', 'Falkland Islands': 'ðŸ‡«ðŸ‡°', 'Micronesia': 'ðŸ‡«ðŸ‡²', 'Faroe Islands': 'ðŸ‡«ðŸ‡´', 'France': 'ðŸ‡«ðŸ‡·', 'Gabon': 'ðŸ‡¬ðŸ‡¦', 'United Kingdom': 'ðŸ‡¬ðŸ‡§', 'Grenada': 'ðŸ‡¬ðŸ‡©', 'Georgia': 'ðŸ‡¬ðŸ‡ª', 'French Guiana': 'ðŸ‡¬ðŸ‡«', 'Guernsey': 'ðŸ‡¬ðŸ‡¬', 'Ghana': 'ðŸ‡¬ðŸ‡­', 'Gibraltar': 'ðŸ‡¬ðŸ‡®', 'Greenland': 'ðŸ‡¬ðŸ‡±', 'Gambia': 'ðŸ‡¬ðŸ‡²', 'Guinea': 'ðŸ‡¬ðŸ‡³', 'Guadeloupe': 'ðŸ‡¬ðŸ‡µ', 'Equatorial Guinea': 'ðŸ‡¬ðŸ‡¶', 'Greece': 'ðŸ‡¬ðŸ‡·', 'South Georgia & South Sandwich Islands': 'ðŸ‡¬ðŸ‡¸', 'Guatemala': 'ðŸ‡¬ðŸ‡¹', 'Guam': 'ðŸ‡¬ðŸ‡º', 'Guinea-Bissau': 'ðŸ‡¬ðŸ‡¼', 'Guyana': 'ðŸ‡¬ðŸ‡¾', 'Hong Kong SAR China': 'ðŸ‡­ðŸ‡°', 'Heard & McDonald Islands': 'ðŸ‡­ðŸ‡²', 'Honduras': 'ðŸ‡­ðŸ‡³', 'Croatia': 'ðŸ‡­ðŸ‡·', 'Haiti': 'ðŸ‡­ðŸ‡¹', 'Hungary': 'ðŸ‡­ðŸ‡º', 'Canary Islands': 'ðŸ‡®ðŸ‡¨', 'Indonesia': 'ðŸ‡®ðŸ‡©', 'Ireland': 'ðŸ‡®ðŸ‡ª', 'Israel': 'ðŸ‡®ðŸ‡±', 'Isle of Man': 'ðŸ‡®ðŸ‡²', 'India': 'ðŸ‡®ðŸ‡³', 'British Indian Ocean Territory': 'ðŸ‡®ðŸ‡´', 'Iraq': 'ðŸ‡®ðŸ‡¶', 'Iran': 'ðŸ‡®ðŸ‡·', 'Iceland': 'ðŸ‡®ðŸ‡¸', 'Italy': 'ðŸ‡®ðŸ‡¹', 'Jersey': 'ðŸ‡¯ðŸ‡ª', 'Jamaica': 'ðŸ‡¯ðŸ‡²', 'Jordan': 'ðŸ‡¯ðŸ‡´', 'Japan': 'ðŸ‡¯ðŸ‡µ', 'Kenya': 'ðŸ‡°ðŸ‡ª', 'Kyrgyzstan': 'ðŸ‡°ðŸ‡¬', 'Cambodia': 'ðŸ‡°ðŸ‡­', 'Kiribati': 'ðŸ‡°ðŸ‡®', 'Comoros': 'ðŸ‡°ðŸ‡²', 'St. Kitts & Nevis': 'ðŸ‡°ðŸ‡³', 'North Korea': 'ðŸ‡°ðŸ‡µ', 'South Korea': 'ðŸ‡°ðŸ‡·', 'Kuwait': 'ðŸ‡°ðŸ‡¼', 'Cayman Islands': 'ðŸ‡°ðŸ‡¾', 'Kazakhstan': 'ðŸ‡°ðŸ‡¿', 'Laos': 'ðŸ‡±ðŸ‡¦', 'Lebanon': 'ðŸ‡±ðŸ‡§', 'St. Lucia': 'ðŸ‡±ðŸ‡¨', 'Liechtenstein': 'ðŸ‡±ðŸ‡®', 'Sri Lanka': 'ðŸ‡±ðŸ‡°', 'Liberia': 'ðŸ‡±ðŸ‡·', 'Lesotho': 'ðŸ‡±ðŸ‡¸', 'Lithuania': 'ðŸ‡±ðŸ‡¹', 'Luxembourg': 'ðŸ‡±ðŸ‡º', 'Latvia': 'ðŸ‡±ðŸ‡»', 'Libya': 'ðŸ‡±ðŸ‡¾', 'Morocco': 'ðŸ‡²ðŸ‡¦', 'Monaco': 'ðŸ‡²ðŸ‡¨', 'Moldova': 'ðŸ‡²ðŸ‡©', 'Montenegro': 'ðŸ‡²ðŸ‡ª', 'St. Martin': 'ðŸ‡²ðŸ‡«', 'Madagascar': 'ðŸ‡²ðŸ‡¬', 'Marshall Islands': 'ðŸ‡²ðŸ‡­', 'North Macedonia': 'ðŸ‡²ðŸ‡°', 'Mali': 'ðŸ‡²ðŸ‡±', 'Myanmar (Burma)': 'ðŸ‡²ðŸ‡²', 'Mongolia': 'ðŸ‡²ðŸ‡³', 'Macao Sar China': 'ðŸ‡²ðŸ‡´', 'Northern Mariana Islands': 'ðŸ‡²ðŸ‡µ', 'Martinique': 'ðŸ‡²ðŸ‡¶', 'Mauritania': 'ðŸ‡²ðŸ‡·', 'Montserrat': 'ðŸ‡²ðŸ‡¸', 'Malta': 'ðŸ‡²ðŸ‡¹', 'Mauritius': 'ðŸ‡²ðŸ‡º', 'Maldives': 'ðŸ‡²ðŸ‡»', 'Malawi': 'ðŸ‡²ðŸ‡¼', 'Mexico': 'ðŸ‡²ðŸ‡½', 'Malaysia': 'ðŸ‡²ðŸ‡¾', 'Mozambique': 'ðŸ‡²ðŸ‡¿', 'Namibia': 'ðŸ‡³ðŸ‡¦', 'New Caledonia': 'ðŸ‡³ðŸ‡¨', 'Niger': 'ðŸ‡³ðŸ‡ª', 'Norfolk Island': 'ðŸ‡³ðŸ‡«', 'Nigeria': 'ðŸ‡³ðŸ‡¬', 'Nicaragua': 'ðŸ‡³ðŸ‡®', 'Netherlands': 'ðŸ‡³ðŸ‡±', 'Norway': 'ðŸ‡³ðŸ‡´', 'Nepal': 'ðŸ‡³ðŸ‡µ', 'Nauru': 'ðŸ‡³ðŸ‡·', 'Niue': 'ðŸ‡³ðŸ‡º', 'New Zealand': 'ðŸ‡³ðŸ‡¿', 'Oman': 'ðŸ‡´ðŸ‡²', 'Panama': 'ðŸ‡µðŸ‡¦', 'Peru': 'ðŸ‡µðŸ‡ª', 'French Polynesia': 'ðŸ‡µðŸ‡«', 'Papua New Guinea': 'ðŸ‡µðŸ‡¬', 'Philippines': 'ðŸ‡µðŸ‡­', 'Pakistan': 'ðŸ‡µðŸ‡°', 'Poland': 'ðŸ‡µðŸ‡±', 'St. Pierre & Miquelon': 'ðŸ‡µðŸ‡²', 'Pitcairn Islands': 'ðŸ‡µðŸ‡³', 'Puerto Rico': 'ðŸ‡µðŸ‡·', 'Palestinian Territories': 'ðŸ‡µðŸ‡¸', 'Portugal': 'ðŸ‡µðŸ‡¹', 'Palau': 'ðŸ‡µðŸ‡¼', 'Paraguay': 'ðŸ‡µðŸ‡¾', 'Qatar': 'ðŸ‡¶ðŸ‡¦', 'RÃ©union': 'ðŸ‡·ðŸ‡ª', 'Romania': 'ðŸ‡·ðŸ‡´', 'Serbia': 'ðŸ‡·ðŸ‡¸', 'Russia': 'ðŸ‡·ðŸ‡º', 'Rwanda': 'ðŸ‡·ðŸ‡¼', 'Saudi Arabia': 'ðŸ‡¸ðŸ‡¦', 'Solomon Islands': 'ðŸ‡¸ðŸ‡§', 'Seychelles': 'ðŸ‡¸ðŸ‡¨', 'Sudan': 'ðŸ‡¸ðŸ‡©', 'Sweden': 'ðŸ‡¸ðŸ‡ª', 'Singapore': 'ðŸ‡¸ðŸ‡¬', 'St. Helena': 'ðŸ‡¸ðŸ‡­', 'Slovenia': 'ðŸ‡¸ðŸ‡®', 'Svalbard & Jan Mayen': 'ðŸ‡¸ðŸ‡¯', 'Slovakia': 'ðŸ‡¸ðŸ‡°', 'Sierra Leone': 'ðŸ‡¸ðŸ‡±', 'San Marino': 'ðŸ‡¸ðŸ‡²', 'Senegal': 'ðŸ‡¸ðŸ‡³', 'Somalia': 'ðŸ‡¸ðŸ‡´', 'Suriname': 'ðŸ‡¸ðŸ‡·', 'South Sudan': 'ðŸ‡¸ðŸ‡¸', 'SÃ£o TomÃ© & PrÃ­ncipe': 'ðŸ‡¸ðŸ‡¹', 'El Salvador': 'ðŸ‡¸ðŸ‡»', 'Sint Maarten': 'ðŸ‡¸ðŸ‡½', 'Syria': 'ðŸ‡¸ðŸ‡¾', 'Eswatini': 'ðŸ‡¸ðŸ‡¿', 'Tristan Da Cunha': 'ðŸ‡¹ðŸ‡¦', 'Turks & Caicos Islands': 'ðŸ‡¹ðŸ‡¨', 'Chad': 'ðŸ‡¹ðŸ‡©', 'French Southern Territories': 'ðŸ‡¹ðŸ‡«', 'Togo': 'ðŸ‡¹ðŸ‡¬', 'Thailand': 'ðŸ‡¹ðŸ‡­', 'Tajikistan': 'ðŸ‡¹ðŸ‡¯', 'Tokelau': 'ðŸ‡¹ðŸ‡°', 'Timor-Leste': 'ðŸ‡¹ðŸ‡±', 'Turkmenistan': 'ðŸ‡¹ðŸ‡²', 'Tunisia': 'ðŸ‡¹ðŸ‡³', 'Tonga': 'ðŸ‡¹ðŸ‡´', 'Turkey': 'ðŸ‡¹ðŸ‡·', 'Trinidad & Tobago': 'ðŸ‡¹ðŸ‡¹', 'Tuvalu': 'ðŸ‡¹ðŸ‡»', 'Taiwan': 'ðŸ‡¹ðŸ‡¼', 'Tanzania': 'ðŸ‡¹ðŸ‡¿', 'Ukraine': 'ðŸ‡ºðŸ‡¦', 'Uganda': 'ðŸ‡ºðŸ‡¬', 'U.S. Outlying Islands': 'ðŸ‡ºðŸ‡²', 'United Nations': 'ðŸ‡ºðŸ‡³', 'United States': 'ðŸ‡ºðŸ‡¸', 'Uruguay': 'ðŸ‡ºðŸ‡¾', 'Uzbekistan': 'ðŸ‡ºðŸ‡¿', 'Vatican City': 'ðŸ‡»ðŸ‡¦', 'St. Vincent & Grenadines': 'ðŸ‡»ðŸ‡¨', 'Venezuela': 'ðŸ‡»ðŸ‡ª', 'British Virgin Islands': 'ðŸ‡»ðŸ‡¬', 'U.S. Virgin Islands': 'ðŸ‡»ðŸ‡®', 'Vietnam': 'ðŸ‡»ðŸ‡³', 'Vanuatu': 'ðŸ‡»ðŸ‡º', 'Wallis & Futuna': 'ðŸ‡¼ðŸ‡«', 'Samoa': 'ðŸ‡¼ðŸ‡¸', 'Kosovo': 'ðŸ‡½ðŸ‡°', 'Yemen': 'ðŸ‡¾ðŸ‡ª', 'Mayotte': 'ðŸ‡¾ðŸ‡¹', 'South Africa': 'ðŸ‡¿ðŸ‡¦', 'Zambia': 'ðŸ‡¿ðŸ‡²', 'Zimbabwe': 'ðŸ‡¿ðŸ‡¼'}
def hasher(text) -> str: h = hashlib.md5(text.encode()); return h.hexdigest()



def getUserChats(username):
   
    res = list(db.chats.find({"users": username}, {"_id": 0})) 

    if not res: res = []

    return res
     # endregion


# region AUTH
@app.route('/sign-up', methods=['post', 'get'])
def sign_up():
    name = request.form['name']
    pw = request.form['pw']
    phone = request.form['pn']
    if request.headers.getlist("X-Forwarded-For"):
        ip = request.headers.getlist("X-Forwarded-For")[0]
    else:
        ip = request.remote_addr
    if ip == "127.0.0.1" :
        ip = "45.240.198.19"
    country = requests.get("http://ip-api.com/json/" + ip).json()["country"]
    try:
        phone += f" ({countries[country]})"
    except:
        pass
    if len(phone) == 0 or phone == "" or phone.replace(" ", "") == "" or len(phone) > 15 + 5: # we add 5 for the extra chars from the flag
        flash("Invalid phone number.", category="error")
        return redirect('/')


    # for user in user_data:
    #     if user_data[user]["phone"] == phone:
    #         flash("Phone number already in use.", category="error")
    #         return redirect('/')
    #? RE ADD THIS AFTER NUMBER VERIFYING

    for l in phone:
        if l.isalpha():
            flash("Phone number cannot contain letters.", category="error")
            return redirect('/')
    
    if db.users.find_one({"username": name}):
        flash("Username taken", category="error")
        return redirect("/")
    if len(name) > 20:
        flash("Character maximum is 20.", category="error")
        return redirect("/")
    else:

        db.users.insert_one({
            "pw": hasher(pw), 
            "phone": phone,
            "listings": [],
            "favs": [],
            "username": name

        })
        
        cookie = make_response(redirect("/"))
        cookie.set_cookie('name', name)
        cookie.set_cookie('pw', pw)
        cookie.set_cookie('phone', phone)
        flash("Account created, Welcome to Sellio!")
        return cookie


@app.route('/login', methods=['post', 'get'])
def login():
    name = request.form.get('name')
    pw = request.form.get('pw')
    if db.users.find({"username": name}):
        if db.users.find_one({"username": name})["pw"] == hasher(pw):
            cookie = make_response(redirect("/"))
            cookie.set_cookie('name', name)
            cookie.set_cookie('pw', pw)
            flash("Logged in!", category="success")
            return cookie
        else:
            flash("Username or password incorrect." , category="error")
            return redirect("/")
    else:
        flash("Username doesn't exist.", category="error")
        return redirect("/")


@app.route('/logout')
def logout():
    cookie = make_response(redirect("/"))
    cookie.delete_cookie('name')
    cookie.delete_cookie('pw')
    flash("Logged out!", category="success")
    return cookie


# endregion




def getLatestListings():
    
    res = list(db.listings.find().limit(15).sort([('$natural',-1)]))
    return res


@app.route('/')
def index():
    cookie_name = request.cookies.get('name')
    cookie_pw = request.cookies.get('pw')
    if cookie_name and cookie_pw:
        try:
            if db.users.find_one({"username":cookie_name})["pw"] == hasher(cookie_pw):
                return render_template("index.html", logged=True,latestListings=getLatestListings(),username=cookie_name, pw=cookie_pw, r=random.randint(0, 10000))
            else:
                return render_template("index.html", latestListings=getLatestListings(), logged=False, r=random.randint(0, 10000))
        except KeyError:
            return render_template("index.html",  latestListings=getLatestListings() ,logged=False, r=random.randint(0, 10000))
    else:
        return render_template("index.html", latestListings=getLatestListings(), logged=False, r=random.randint(0, 10000))


@app.route('/new-listing')
def new_listing():
    cookie_name = request.cookies.get("name")
    cookie_pw = request.cookies.get("pw")
    if (
        not cookie_name
        or not cookie_pw
        or db.users.find_one({"username":cookie_name})["pw"] != hasher(cookie_pw)
    ):
        flash("Please login first.", category="error")
        return redirect("/")

    if request.headers.getlist("X-Forwarded-For"):
        ip = request.headers.getlist("X-Forwarded-For")[0]
    else:
        ip = request.remote_addr
    if ip == "127.0.0.1" :
        ip = "45.240.198.19"
    
    country = requests.get("http://ip-api.com/json/" + ip).json()["country"]
    currency = CountryInfo(country).currencies()[0]
    return render_template("create.html", logged=True, currency=currency,username=cookie_name, pw=cookie_pw, r=random.randint(0, 10000))


@app.route('/add-listing', methods=['post'])
def add_listing():

    title = request.form.get("title")
    description = request.form.get("description")
    condition = request.form.get("condition")
    price = request.form.get("price")
    images = request.files
    listingId = uuid()
    date = request.form.get("date")
    os.mkdir(f"./static/listing_images/{listingId}")
    category = request.form.get("category")
    imageTypes = []

    if price.isalpha():
        
        return "error uploading"
    for i in range(len(images)):
        image = images[f"image{i+1}"]
        imageExtension = os.path.splitext(image.filename)[1]
        imageTypes.append(imageExtension[1:])
        image.save(f"./static/listing_images/{listingId}/{i}{imageExtension}")

    if request.headers.getlist("X-Forwarded-For"):
        ip = request.headers.getlist("X-Forwarded-For")[0]
    else:
        ip = request.remote_addr
    if ip == "127.0.0.1" :
        ip = "45.240.198.19"
    
    country = requests.get("http://ip-api.com/json/" + ip).json()["country"]
    currency = CountryInfo(country).currencies()[0]
    db.listings.insert_one({
        "title": title,
        "description": description,
        "condition": condition,
        "price": price,
        "currency": currency,
        "id": listingId,
        "imageType": imageTypes,
        "owner": request.cookies.get("name"),
        "category": category,
        "date": date
        # "images": images,
    })
    db.users.find_one({"username":request.cookies.get("name")})["listings"].append(listingId)
    db["users"].update_one({"username": request.cookies.get("name")}, {"$push": {"listings": listingId}})
    db.reports.insert_one({"id": listingId, "reports": []})

    return listingId


@app.route('/search', methods=['POST'])
def search():

    text = request.form.get('text')
    tl = text.lower()
    res = []
    for listing in list(db.listings.find({}, {"_id": 0})):
        listingl = listing['title'].lower()
        if listingl in tl or tl.endswith(listingl) or listingl.endswith(tl) or tl.startswith(listingl) or listingl.startswith(tl) or tl == listingl or tl in listingl:
            res.append(listing)
    
    return jsonify({"res":res})


@app.route('/listing/<listingId>')
def lising(listingId):
    if not db.listings.find_one({"id": listingId}):
        flash("Listing not found.", category="error")
        return redirect("/")
    
    cookie_name = request.cookies.get("name")
    cookie_pw = request.cookies.get("pw")
    listing = db.listings.find_one({"id": listingId})
    if (
    not cookie_name
    or not cookie_pw
    or db.users.find_one({"username": cookie_name})["pw"] != hasher(cookie_pw)
    ):

        return render_template('listing.html', listing=listing.randint(0, 10000))


    return render_template('listing.html', listing=listing, targetPhone=db.users.find_one({"username":listing["owner"]})["phone"] , logged=True, username=cookie_name, pw=cookie_pw, r=random.randint(0, 10000))
            

@app.route('/user/<targetName>')
def user(targetName):
    targetUser = db.users.find_one({"username":targetName})
    if not targetUser:
        flash("User not found", category="error")
        return redirect('/')
    phone = targetUser["phone"]
    targetListings = targetUser["listings"]
    listingsRes = [db.listings.find_one({"id":l}) for l in targetListings]
    if not request.cookies.get("name") or not request.cookies.get("pw"):
        return render_template("profile.html", phone=phone, listings=listingsRes,targetName=targetName,logged=False, r=random.randint(0, 10000))

    return render_template("profile.html", phone=phone, listings=listingsRes,targetName=targetName,logged=True, username=request.cookies.get("name"), pw=request.cookies.get("pw"), r=random.randint(0, 10000))



@app.route('/add-to-fav_listingId=<listingId>')
def addToFav(listingId):
    username = request.cookies.get('name')
    pw = request.cookies.get('pw')

    if hasher(pw) != db.users.find_one({"username": username})["pw"]:
        return jsonify({"res": "Wrong password"})

    if db.listings.find_one({"id": listingId}) and listingId not in db.users.find_one({"username": username})["favs"]: 
        db["users"].update_one({"username": username}, {"$push": {"favs": listingId}})
        return jsonify({"res": "success"})
    else:
        return jsonify({"res":"listing not found"})

@app.route('/remove-from-fav_listingId=<listingId>')
def removeFromFav(listingId):
    username = request.cookies.get('name')
    pw = request.cookies.get('pw')

    if hasher(pw) != db.users.find_one({"username": username})["pw"]:
        return jsonify({"res": "Wrong password"})

    if db.listings.find_one({"id": listingId}) and listingId in db.users.find_one({"username": username})["favs"]: 
        db.users.update_one({"username": username}, {"$pull": {"favs": listingId}})
        return jsonify({"res": "success"})
    else:
        return jsonify({"res":"listing not found"})


@app.route('/get-my-favs')
def getMyFavs():
    pw = request.cookies.get('pw')
    username = request.cookies.get('name')
    if hasher(pw) == db.users.find_one({"username": username})["pw"]:
        return jsonify({"res": db.users.find_one({"username": username})["favs"]})
    else:
        return jsonify({"res": "wrong password"}) 


@app.route('/favorites')
def favorites():
    cookie_name = request.cookies.get('name')
    cookie_pw = request.cookies.get('pw')
    if cookie_name and cookie_pw:
        try:
            if db.users.find_one({"username": cookie_name})["pw"] == hasher(cookie_pw):
                favListings = []
                for listing in db.users.find_one({"username": cookie_name})["favs"]:
                    favListings.append(db.listings.find_one({"id": listing}))
                

                return render_template("favorites.html", favListings=favListings,logged=True, username=cookie_name, pw=cookie_pw, r=random.randint(0, 10000))
            else:
                flash("Please login first", category="error")
                return redirect('/')
        except KeyError:
                flash("Please login first", category="error")
                return redirect('/')
    else:
                flash("Please login first", category="error")
                return redirect('/') 

@app.route("/search-with-category_cat=<category>")
def search_with_category(category):
    return jsonify({"res":list(db.listings.find({"category": category}, {"_id":0}))})



@app.route('/remove-listing_id=<id>')
def removeListing(id):
    pw = request.cookies.get('pw')
    username = request.cookies.get('name')
    if hasher(pw) != db.users.find_one({"username": username})["pw"]:
        return jsonify({"res":"wrong password"})
    if not db.listings.find_one({"id": id}):
        return jsonify({"res":"listing not found"})

    for _ in range(len(db.listings.find_one({"id": id})["imageType"])):
        try:
            shutil.rmtree("./static/listing_images/" + id )
        except:
            pass
    db.users.update_one({"username": username}, {"$pull": {"listings": id}})
    db.listings.delete_one({"id":id})
    db.users.update_one({"username": username}, {"$pull": {"favs": id}})
    return jsonify({"res":"success"})



@app.route('/change-pfp', methods=['POST'])
def changePfp():
    username = request.cookies.get('name')
    pw = request.cookies.get('pw')
    if hasher(pw) == db.users.find_one({"username": username})["pw"]:
        newPfp = request.files["image"]
        newPfp.save("static/pfps/" +username + os.path.splitext(newPfp.filename)[1])
        # user_data[username]["pfp"] = "/static/pfp/" + username + os.path.splitext(newPfp.filename)[1]
        return "success"
    else:
        return "wrong password"



@app.route('/chats')
def chatsPage():
    username = request.cookies.get("name")
    pw = request.cookies.get("pw")

    if  username and  pw:
        if hasher(pw) == db.users.find_one({"username": username})["pw"]:
            userChats = getUserChats(username)

            return render_template("chats.html", logged=True, username=username ,pw=pw, chats=userChats,r=random.randint(0, 10000))
        flash("Wrong password", category="error")
    else:
        flash("Please login first", category="error")

    return redirect("/")



@app.route('/add-user-to-chat_user=<targetName>')
def addUserToChat(targetName):
    username = request.cookies.get('name')
    pw = request.cookies.get('pw')

    if hasher(pw) == db.users.find_one({"username": username})["pw"]:
        userChats = getUserChats(username)
        if targetName in [item for sublist in [x["users"] for x in userChats] for item in sublist]:
            return redirect("/chats#" + targetName)
        db.chats.insert_one({"users":[username, targetName], "chat": []})
        return redirect("/chats#" + targetName)

    else:
        flash("wrong password", category="error")
        return redirect("/")    



@app.route('/send-message_user=<targetName>', methods=['POST'])
def sendMessage(targetName):
    username = request.cookies.get('name')
    pw = request.cookies.get('pw')
    message = request.form.get('message')
    if(len(message) > 2000):
        return "message too long"

    if hasher(pw) == db.users.find_one({"username": username})["pw"]:
        db.chats.update_one({"users": {"$all": [username, targetName]}}, {"$push": {"chat":[username, message]}})
        return "sent"
    else:
        return "wrong password"


@app.route('/get-my-messages')
def getMyMessages():
    username = request.cookies.get('name')
    pw = request.cookies.get('pw')
    
    if hasher(pw) == db.users.find_one({"username": username})["pw"]:
        return jsonify(getUserChats(username))
    else:
        return "wrong password"



@app.route('/send-report', methods=['POST'])
def send_report():
    username = request.cookies.get("name")
    pw = request.cookies.get("pw")
    reason = request.form.get("reason")
    moreInfo = request.form.get("moreInfo")
    listingId = request.form.get("listingId")

    if len(moreInfo) == 0 or len(reason) == 0:
        return "cannot be empty"
    if hasher(pw) == db.users.find_one({"username": username})["pw"]:
        db.reports.update_one({"id":listingId},{"$push": {"reports":{
            "reason": reason,
            "info": moreInfo,
            "date": datetime.datetime.now().strftime("%Y-%m-%d"),
            "from": username
        }}})
        return "success"
    else:
        return "wrong password"





@app.route('/about')
def about():
    cookie_name = request.cookies.get('name')
    cookie_pw = request.cookies.get('pw')
    if cookie_name and cookie_pw:
        try:
            if db.users.find_one({"username": cookie_name})["pw"] == hasher(cookie_pw):
                return render_template("about.html", logged=True, username=cookie_name, pw=cookie_pw, r=random.randint(0, 10000))
            else:
                return render_template("about.html",  logged=False, r=random.randint(0, 10000))
        except KeyError:
            return render_template("about.html",   logged=False, r=random.randint(0, 10000))
    else:
        return render_template("about.html",  logged=False, r=random.randint(0, 10000))
    

@app.route('/get-chat-length')
def get_chat_length():
        username = request.cookies.get("name")
        pw = request.cookies.get("pw")
     
        if hasher(pw) == db.users.find_one({"username": username})["pw"]:
            res = len([item for sublist in [x["chat"] for x in list(db.chats.find({"users": username}))] for item in sublist] )
            return jsonify({"res":res})
        else:
            return "wrong password"
    
@app.route('/search-users_q=<q>')
def search_users(q):
    tl = q.lower()
    res = []
    for user in db.users.distinct("username"):
        userl = user.lower()
        if userl in tl or tl.endswith(userl) or userl.endswith(tl) or tl.startswith(userl) or userl.startswith(tl) or tl == userl or tl in userl:
            res.append(user)

    return jsonify({"res":res})

    



@app.route('/flash=<flashMessage>_url=<url>')
def customFlash(flashMessage, url):
    print(url)
    flash(flashMessage)
    url = "/" if url == "EMPTY" else "/" + url.replace("SLASH", "/")

    return redirect(url)


    
@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404





app.run(host='localhost', port=8000, debug=True)
