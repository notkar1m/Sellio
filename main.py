# coding=utf8
import datetime
import sys
from flask import *
import hashlib
import json
import random
import requests
from shortuuid import uuid
import os
import shutil
import time
from countryinfo import CountryInfo
app = Flask(__name__)

app.config["SECRET_KEY"] = "SDFL:JSDFLKJSDFlJKSDFlkj"
with open("db/users.json") as fp:
    user_data = json.load(fp)
with open("db/listings.json") as fp:
    listings = json.load(fp)
with open("db/reports.json") as fp:
    reports = json.load(fp)
with open("db/chats.json") as fp:
    chats = json.load(fp)
# region helpers

countries = {'Ascension Island': 'ğŸ‡¦ğŸ‡¨', 'Andorra': 'ğŸ‡¦ğŸ‡©', 'United Arab Emirates': 'ğŸ‡¦ğŸ‡ª', 'Afghanistan': 'ğŸ‡¦ğŸ‡«', 'Antigua & Barbuda': 'ğŸ‡¦ğŸ‡¬', 'Anguilla': 'ğŸ‡¦ğŸ‡®', 'Albania': 'ğŸ‡¦ğŸ‡±', 'Armenia': 'ğŸ‡¦ğŸ‡²', 'Angola': 'ğŸ‡¦ğŸ‡´', 'Antarctica': 'ğŸ‡¦ğŸ‡¶', 'Argentina': 'ğŸ‡¦ğŸ‡·', 'American Samoa': 'ğŸ‡¦ğŸ‡¸', 'Austria': 'ğŸ‡¦ğŸ‡¹', 'Australia': 'ğŸ‡¦ğŸ‡º', 'Aruba': 'ğŸ‡¦ğŸ‡¼', 'Ã…land Islands': 'ğŸ‡¦ğŸ‡½', 'Azerbaijan': 'ğŸ‡¦ğŸ‡¿', 'Bosnia & Herzegovina': 'ğŸ‡§ğŸ‡¦', 'Barbados': 'ğŸ‡§ğŸ‡§', 'Bangladesh': 'ğŸ‡§ğŸ‡©', 'Belgium': 'ğŸ‡§ğŸ‡ª', 'Burkina Faso': 'ğŸ‡§ğŸ‡«', 'Bulgaria': 'ğŸ‡§ğŸ‡¬', 'Bahrain': 'ğŸ‡§ğŸ‡­', 'Burundi': 'ğŸ‡§ğŸ‡®', 'Benin': 'ğŸ‡§ğŸ‡¯', 'St. BarthÃ©lemy': 'ğŸ‡§ğŸ‡±', 'Bermuda': 'ğŸ‡§ğŸ‡²', 'Brunei': 'ğŸ‡§ğŸ‡³', 'Bolivia': 'ğŸ‡§ğŸ‡´', 'Caribbean Netherlands': 'ğŸ‡§ğŸ‡¶', 'Brazil': 'ğŸ‡§ğŸ‡·', 'Bahamas': 'ğŸ‡§ğŸ‡¸', 'Bhutan': 'ğŸ‡§ğŸ‡¹', 'Bouvet Island': 'ğŸ‡§ğŸ‡»', 'Botswana': 'ğŸ‡§ğŸ‡¼', 'Belarus': 'ğŸ‡§ğŸ‡¾', 'Belize': 'ğŸ‡§ğŸ‡¿', 'Canada': 'ğŸ‡¨ğŸ‡¦', 'Cocos (Keeling) Islands': 'ğŸ‡¨ğŸ‡¨', 'Congo - Kinshasa': 'ğŸ‡¨ğŸ‡©', 'Central African Republic': 'ğŸ‡¨ğŸ‡«', 'Congo - Brazzaville': 'ğŸ‡¨ğŸ‡¬', 'Switzerland': 'ğŸ‡¨ğŸ‡­', 'CÃ´te dâ€™Ivoire': 'ğŸ‡¨ğŸ‡®', 'Cook Islands': 'ğŸ‡¨ğŸ‡°', 'Chile': 'ğŸ‡¨ğŸ‡±', 'Cameroon': 'ğŸ‡¨ğŸ‡²', 'China': 'ğŸ‡¨ğŸ‡³', 'Colombia': 'ğŸ‡¨ğŸ‡´', 'Clipperton Island': 'ğŸ‡¨ğŸ‡µ', 'Costa Rica': 'ğŸ‡¨ğŸ‡·', 'Cuba': 'ğŸ‡¨ğŸ‡º', 'Cape Verde': 'ğŸ‡¨ğŸ‡»', 'CuraÃ§ao': 'ğŸ‡¨ğŸ‡¼', 'Christmas Island': 'ğŸ‡¨ğŸ‡½', 'Cyprus': 'ğŸ‡¨ğŸ‡¾', 'Czechia': 'ğŸ‡¨ğŸ‡¿', 'Germany': 'ğŸ‡©ğŸ‡ª', 'Diego Garcia': 'ğŸ‡©ğŸ‡¬', 'Djibouti': 'ğŸ‡©ğŸ‡¯', 'Denmark': 'ğŸ‡©ğŸ‡°', 'Dominica': 'ğŸ‡©ğŸ‡²', 'Dominican Republic': 'ğŸ‡©ğŸ‡´', 'Algeria': 'ğŸ‡©ğŸ‡¿', 'Ceuta & Melilla': 'ğŸ‡ªğŸ‡¦', 'Ecuador': 'ğŸ‡ªğŸ‡¨', 'Estonia': 'ğŸ‡ªğŸ‡ª', 'Egypt': 'ğŸ‡ªğŸ‡¬', 'Western Sahara': 'ğŸ‡ªğŸ‡­', 'Eritrea': 'ğŸ‡ªğŸ‡·', 'Spain': 'ğŸ‡ªğŸ‡¸', 'Ethiopia': 'ğŸ‡ªğŸ‡¹', 'European Union': 'ğŸ‡ªğŸ‡º', 'Finland': 'ğŸ‡«ğŸ‡®', 'Fiji': 'ğŸ‡«ğŸ‡¯', 'Falkland Islands': 'ğŸ‡«ğŸ‡°', 'Micronesia': 'ğŸ‡«ğŸ‡²', 'Faroe Islands': 'ğŸ‡«ğŸ‡´', 'France': 'ğŸ‡«ğŸ‡·', 'Gabon': 'ğŸ‡¬ğŸ‡¦', 'United Kingdom': 'ğŸ‡¬ğŸ‡§', 'Grenada': 'ğŸ‡¬ğŸ‡©', 'Georgia': 'ğŸ‡¬ğŸ‡ª', 'French Guiana': 'ğŸ‡¬ğŸ‡«', 'Guernsey': 'ğŸ‡¬ğŸ‡¬', 'Ghana': 'ğŸ‡¬ğŸ‡­', 'Gibraltar': 'ğŸ‡¬ğŸ‡®', 'Greenland': 'ğŸ‡¬ğŸ‡±', 'Gambia': 'ğŸ‡¬ğŸ‡²', 'Guinea': 'ğŸ‡¬ğŸ‡³', 'Guadeloupe': 'ğŸ‡¬ğŸ‡µ', 'Equatorial Guinea': 'ğŸ‡¬ğŸ‡¶', 'Greece': 'ğŸ‡¬ğŸ‡·', 'South Georgia & South Sandwich Islands': 'ğŸ‡¬ğŸ‡¸', 'Guatemala': 'ğŸ‡¬ğŸ‡¹', 'Guam': 'ğŸ‡¬ğŸ‡º', 'Guinea-Bissau': 'ğŸ‡¬ğŸ‡¼', 'Guyana': 'ğŸ‡¬ğŸ‡¾', 'Hong Kong SAR China': 'ğŸ‡­ğŸ‡°', 'Heard & McDonald Islands': 'ğŸ‡­ğŸ‡²', 'Honduras': 'ğŸ‡­ğŸ‡³', 'Croatia': 'ğŸ‡­ğŸ‡·', 'Haiti': 'ğŸ‡­ğŸ‡¹', 'Hungary': 'ğŸ‡­ğŸ‡º', 'Canary Islands': 'ğŸ‡®ğŸ‡¨', 'Indonesia': 'ğŸ‡®ğŸ‡©', 'Ireland': 'ğŸ‡®ğŸ‡ª', 'Israel': 'ğŸ‡®ğŸ‡±', 'Isle of Man': 'ğŸ‡®ğŸ‡²', 'India': 'ğŸ‡®ğŸ‡³', 'British Indian Ocean Territory': 'ğŸ‡®ğŸ‡´', 'Iraq': 'ğŸ‡®ğŸ‡¶', 'Iran': 'ğŸ‡®ğŸ‡·', 'Iceland': 'ğŸ‡®ğŸ‡¸', 'Italy': 'ğŸ‡®ğŸ‡¹', 'Jersey': 'ğŸ‡¯ğŸ‡ª', 'Jamaica': 'ğŸ‡¯ğŸ‡²', 'Jordan': 'ğŸ‡¯ğŸ‡´', 'Japan': 'ğŸ‡¯ğŸ‡µ', 'Kenya': 'ğŸ‡°ğŸ‡ª', 'Kyrgyzstan': 'ğŸ‡°ğŸ‡¬', 'Cambodia': 'ğŸ‡°ğŸ‡­', 'Kiribati': 'ğŸ‡°ğŸ‡®', 'Comoros': 'ğŸ‡°ğŸ‡²', 'St. Kitts & Nevis': 'ğŸ‡°ğŸ‡³', 'North Korea': 'ğŸ‡°ğŸ‡µ', 'South Korea': 'ğŸ‡°ğŸ‡·', 'Kuwait': 'ğŸ‡°ğŸ‡¼', 'Cayman Islands': 'ğŸ‡°ğŸ‡¾', 'Kazakhstan': 'ğŸ‡°ğŸ‡¿', 'Laos': 'ğŸ‡±ğŸ‡¦', 'Lebanon': 'ğŸ‡±ğŸ‡§', 'St. Lucia': 'ğŸ‡±ğŸ‡¨', 'Liechtenstein': 'ğŸ‡±ğŸ‡®', 'Sri Lanka': 'ğŸ‡±ğŸ‡°', 'Liberia': 'ğŸ‡±ğŸ‡·', 'Lesotho': 'ğŸ‡±ğŸ‡¸', 'Lithuania': 'ğŸ‡±ğŸ‡¹', 'Luxembourg': 'ğŸ‡±ğŸ‡º', 'Latvia': 'ğŸ‡±ğŸ‡»', 'Libya': 'ğŸ‡±ğŸ‡¾', 'Morocco': 'ğŸ‡²ğŸ‡¦', 'Monaco': 'ğŸ‡²ğŸ‡¨', 'Moldova': 'ğŸ‡²ğŸ‡©', 'Montenegro': 'ğŸ‡²ğŸ‡ª', 'St. Martin': 'ğŸ‡²ğŸ‡«', 'Madagascar': 'ğŸ‡²ğŸ‡¬', 'Marshall Islands': 'ğŸ‡²ğŸ‡­', 'North Macedonia': 'ğŸ‡²ğŸ‡°', 'Mali': 'ğŸ‡²ğŸ‡±', 'Myanmar (Burma)': 'ğŸ‡²ğŸ‡²', 'Mongolia': 'ğŸ‡²ğŸ‡³', 'Macao Sar China': 'ğŸ‡²ğŸ‡´', 'Northern Mariana Islands': 'ğŸ‡²ğŸ‡µ', 'Martinique': 'ğŸ‡²ğŸ‡¶', 'Mauritania': 'ğŸ‡²ğŸ‡·', 'Montserrat': 'ğŸ‡²ğŸ‡¸', 'Malta': 'ğŸ‡²ğŸ‡¹', 'Mauritius': 'ğŸ‡²ğŸ‡º', 'Maldives': 'ğŸ‡²ğŸ‡»', 'Malawi': 'ğŸ‡²ğŸ‡¼', 'Mexico': 'ğŸ‡²ğŸ‡½', 'Malaysia': 'ğŸ‡²ğŸ‡¾', 'Mozambique': 'ğŸ‡²ğŸ‡¿', 'Namibia': 'ğŸ‡³ğŸ‡¦', 'New Caledonia': 'ğŸ‡³ğŸ‡¨', 'Niger': 'ğŸ‡³ğŸ‡ª', 'Norfolk Island': 'ğŸ‡³ğŸ‡«', 'Nigeria': 'ğŸ‡³ğŸ‡¬', 'Nicaragua': 'ğŸ‡³ğŸ‡®', 'Netherlands': 'ğŸ‡³ğŸ‡±', 'Norway': 'ğŸ‡³ğŸ‡´', 'Nepal': 'ğŸ‡³ğŸ‡µ', 'Nauru': 'ğŸ‡³ğŸ‡·', 'Niue': 'ğŸ‡³ğŸ‡º', 'New Zealand': 'ğŸ‡³ğŸ‡¿', 'Oman': 'ğŸ‡´ğŸ‡²', 'Panama': 'ğŸ‡µğŸ‡¦', 'Peru': 'ğŸ‡µğŸ‡ª', 'French Polynesia': 'ğŸ‡µğŸ‡«', 'Papua New Guinea': 'ğŸ‡µğŸ‡¬', 'Philippines': 'ğŸ‡µğŸ‡­', 'Pakistan': 'ğŸ‡µğŸ‡°', 'Poland': 'ğŸ‡µğŸ‡±', 'St. Pierre & Miquelon': 'ğŸ‡µğŸ‡²', 'Pitcairn Islands': 'ğŸ‡µğŸ‡³', 'Puerto Rico': 'ğŸ‡µğŸ‡·', 'Palestinian Territories': 'ğŸ‡µğŸ‡¸', 'Portugal': 'ğŸ‡µğŸ‡¹', 'Palau': 'ğŸ‡µğŸ‡¼', 'Paraguay': 'ğŸ‡µğŸ‡¾', 'Qatar': 'ğŸ‡¶ğŸ‡¦', 'RÃ©union': 'ğŸ‡·ğŸ‡ª', 'Romania': 'ğŸ‡·ğŸ‡´', 'Serbia': 'ğŸ‡·ğŸ‡¸', 'Russia': 'ğŸ‡·ğŸ‡º', 'Rwanda': 'ğŸ‡·ğŸ‡¼', 'Saudi Arabia': 'ğŸ‡¸ğŸ‡¦', 'Solomon Islands': 'ğŸ‡¸ğŸ‡§', 'Seychelles': 'ğŸ‡¸ğŸ‡¨', 'Sudan': 'ğŸ‡¸ğŸ‡©', 'Sweden': 'ğŸ‡¸ğŸ‡ª', 'Singapore': 'ğŸ‡¸ğŸ‡¬', 'St. Helena': 'ğŸ‡¸ğŸ‡­', 'Slovenia': 'ğŸ‡¸ğŸ‡®', 'Svalbard & Jan Mayen': 'ğŸ‡¸ğŸ‡¯', 'Slovakia': 'ğŸ‡¸ğŸ‡°', 'Sierra Leone': 'ğŸ‡¸ğŸ‡±', 'San Marino': 'ğŸ‡¸ğŸ‡²', 'Senegal': 'ğŸ‡¸ğŸ‡³', 'Somalia': 'ğŸ‡¸ğŸ‡´', 'Suriname': 'ğŸ‡¸ğŸ‡·', 'South Sudan': 'ğŸ‡¸ğŸ‡¸', 'SÃ£o TomÃ© & PrÃ­ncipe': 'ğŸ‡¸ğŸ‡¹', 'El Salvador': 'ğŸ‡¸ğŸ‡»', 'Sint Maarten': 'ğŸ‡¸ğŸ‡½', 'Syria': 'ğŸ‡¸ğŸ‡¾', 'Eswatini': 'ğŸ‡¸ğŸ‡¿', 'Tristan Da Cunha': 'ğŸ‡¹ğŸ‡¦', 'Turks & Caicos Islands': 'ğŸ‡¹ğŸ‡¨', 'Chad': 'ğŸ‡¹ğŸ‡©', 'French Southern Territories': 'ğŸ‡¹ğŸ‡«', 'Togo': 'ğŸ‡¹ğŸ‡¬', 'Thailand': 'ğŸ‡¹ğŸ‡­', 'Tajikistan': 'ğŸ‡¹ğŸ‡¯', 'Tokelau': 'ğŸ‡¹ğŸ‡°', 'Timor-Leste': 'ğŸ‡¹ğŸ‡±', 'Turkmenistan': 'ğŸ‡¹ğŸ‡²', 'Tunisia': 'ğŸ‡¹ğŸ‡³', 'Tonga': 'ğŸ‡¹ğŸ‡´', 'Turkey': 'ğŸ‡¹ğŸ‡·', 'Trinidad & Tobago': 'ğŸ‡¹ğŸ‡¹', 'Tuvalu': 'ğŸ‡¹ğŸ‡»', 'Taiwan': 'ğŸ‡¹ğŸ‡¼', 'Tanzania': 'ğŸ‡¹ğŸ‡¿', 'Ukraine': 'ğŸ‡ºğŸ‡¦', 'Uganda': 'ğŸ‡ºğŸ‡¬', 'U.S. Outlying Islands': 'ğŸ‡ºğŸ‡²', 'United Nations': 'ğŸ‡ºğŸ‡³', 'United States': 'ğŸ‡ºğŸ‡¸', 'Uruguay': 'ğŸ‡ºğŸ‡¾', 'Uzbekistan': 'ğŸ‡ºğŸ‡¿', 'Vatican City': 'ğŸ‡»ğŸ‡¦', 'St. Vincent & Grenadines': 'ğŸ‡»ğŸ‡¨', 'Venezuela': 'ğŸ‡»ğŸ‡ª', 'British Virgin Islands': 'ğŸ‡»ğŸ‡¬', 'U.S. Virgin Islands': 'ğŸ‡»ğŸ‡®', 'Vietnam': 'ğŸ‡»ğŸ‡³', 'Vanuatu': 'ğŸ‡»ğŸ‡º', 'Wallis & Futuna': 'ğŸ‡¼ğŸ‡«', 'Samoa': 'ğŸ‡¼ğŸ‡¸', 'Kosovo': 'ğŸ‡½ğŸ‡°', 'Yemen': 'ğŸ‡¾ğŸ‡ª', 'Mayotte': 'ğŸ‡¾ğŸ‡¹', 'South Africa': 'ğŸ‡¿ğŸ‡¦', 'Zambia': 'ğŸ‡¿ğŸ‡²', 'Zimbabwe': 'ğŸ‡¿ğŸ‡¼'}
def hasher(text) -> str: h = hashlib.md5(text.encode()); return h.hexdigest()


def dumpJson():
    global user_data
    global listings
    global reports
    global chats
    with open("db/users.json", "w+") as fp:
        json.dump(user_data, fp, indent=4)
    with open("db/listings.json", "w+") as fp:
        json.dump(listings, fp, indent=4)
    with open("db/reports.json", "w+") as fp:
        json.dump(reports, fp, indent=4)
    with open("db/chats.json", "w+") as fp:
        json.dump(chats, fp, indent=4)
    with open("db/users.json") as fp:
        user_data = json.load(fp)
    with open("db/listings.json") as fp:
        listings = json.load(fp)
    with open("db/reports.json") as fp:
        reports = json.load(fp)
    with open("db/chats.json") as fp:
        chats = json.load(fp)




def getUserChats(username):
    userChats = {}
    for chat in chats:
        if username in chat.split("$"):
            userChats[chat] = chats[chat]
    return userChats
# endregion


# region AUTH
@app.route('/sign-up', methods=['post', 'get'])
def sign_up():
    global user_data
    name = request.form['name']
    pw = request.form['pw']
    phone = request.form['pn']
    if request.headers.getlist("X-Forwarded-For"):
        ip = request.headers.getlist("X-Forwarded-For")[0]
    else:
        ip = request.remote_addr
    if ip == "127.0.0.1" :
        ip = "45.240.198.19"
    country = requests.get("http://ip-api.com/json/" + ip).json()["country"]
    try:
        phone += f" ({countries[country]})"
    except:
        pass
    if len(phone) == 0 or phone == "" or phone.replace(" ", "") == "" or len(phone) > 15 + 5: # we add 5 for the extra chars from the flag
        flash("Invalid phone number.", category="error")
        return redirect('/')


    # for user in user_data:
    #     if user_data[user]["phone"] == phone:
    #         flash("Phone number already in use.", category="error")
    #         return redirect('/')
    #? RE ADD THIS AFTER NUMBER VERIFYING
    
    for l in phone:
        if l.isalpha():
            flash("Phone number cannot contain letters.", category="error")
            return redirect('/')
    if name in user_data.keys():
        flash("Username taken", category="error")
        return redirect("/")
    if len(name) > 20:
        flash("Character maximum is 20.", category="error")
        return redirect("/")
    else:
        user_data[name] = {}
        user_data[name]['pw'] = hasher(pw)
        user_data[name]['phone'] = phone
        user_data[name]["listings"] = []
        user_data[name]["favs"] = []
        # user_data[name]["chats"] = {}
        '''
        chats = 
            {
                "user1": [["user1", "lol"], ["user1", "haha"], ["karim", "bruh"]],
                "tester" : [["tester", "hello"], ["karim", "whats up"]]
            }
        
        
        '''
        # user_data[name]["pfp"] = "https://api-private.atlassian.com/users/aa7543e682dff486562017fe2fedc6c0/avatar"
        

        dumpJson()
        time.sleep(2)

        cookie = make_response(redirect("/"))
        cookie.set_cookie('name', name)
        cookie.set_cookie('pw', pw)
        cookie.set_cookie('phone', phone)
        flash("Account created, Welcome to Sellio!")
        return cookie


@app.route('/login', methods=['post', 'get'])
def login():
    name = request.form.get('name')
    pw = request.form.get('pw')
    if name in user_data:
        if user_data[name]['pw'] == hasher(pw):
            cookie = make_response(redirect("/"))
            cookie.set_cookie('name', name)
            cookie.set_cookie('pw', pw)
            flash("Logged in!", category="success")
            return cookie
        else:
            flash("Username or password incorrect." + pw + " " + hasher(pw) , category="error")
            return redirect("/")
    else:
        flash("Username doesn't exist." + name + " " + str(user_data), category="error")
        return redirect("/")


@app.route('/logout')
def logout():
    cookie = make_response(redirect("/"))
    cookie.delete_cookie('name')
    cookie.delete_cookie('pw')
    flash("Logged out!", category="success")
    return cookie


# endregion


# region index

def getLatestListings():
    
    if len(list(listings.keys())) >= 15:
        res = [listings[list(listings.keys())[-i]] for i in range(15)]
    else:
        res = [listings[list(listings.keys())[-i]] for i in range(len(listings.keys()))]

    return res
@app.route('/')
def index():
    global user_data
    cookie_name = request.cookies.get('name')
    cookie_pw = request.cookies.get('pw')
    if cookie_name and cookie_pw:
        try:
            if user_data[cookie_name]['pw'] == hasher(cookie_pw):
                return render_template("index.html", logged=True,latestListings=getLatestListings(),username=cookie_name, pw=cookie_pw, r=random.randint(0, 10000))
            else:
                return render_template("index.html", latestListings=getLatestListings(), logged=False, r=random.randint(0, 10000))
        except KeyError:
            return render_template("index.html",  latestListings=getLatestListings() ,logged=False, r=random.randint(0, 10000))
    else:
        return render_template("index.html", latestListings=getLatestListings(), logged=False, r=random.randint(0, 10000))


@app.route('/new-listing')
def new_listing():
    cookie_name = request.cookies.get("name")
    cookie_pw = request.cookies.get("pw")
    if (
        not cookie_name
        or not cookie_pw
        or user_data[cookie_name]["pw"] != hasher(cookie_pw)
    ):
        flash("Please login first.", category="error")
        return redirect("/")

    if request.headers.getlist("X-Forwarded-For"):
        ip = request.headers.getlist("X-Forwarded-For")[0]
    else:
        ip = request.remote_addr
    if ip == "127.0.0.1" :
        ip = "45.240.198.19"
    
    country = requests.get("http://ip-api.com/json/" + ip).json()["country"]
    currency = CountryInfo(country).currencies()[0]
    return render_template("create.html", logged=True, currency=currency,username=cookie_name, pw=cookie_pw, r=random.randint(0, 10000))


@app.route('/add-listing', methods=['post'])
def add_listing():

    title = request.form.get("title")
    description = request.form.get("description")
    condition = request.form.get("condition")
    price = request.form.get("price")
    images = request.files
    listingId = uuid()
    date = request.form.get("date")
    os.mkdir(f"./static/listing_images/{listingId}")
    category = request.form.get("category")
    imageTypes = []

    if price.isalpha():
        
        return "error uploading"
    for i in range(len(images)):
        image = images[f"image{i+1}"]
        imageExtension = os.path.splitext(image.filename)[1]
        imageTypes.append(imageExtension[1:])
        image.save(f"./static/listing_images/{listingId}/{i}{imageExtension}")

    if request.headers.getlist("X-Forwarded-For"):
        ip = request.headers.getlist("X-Forwarded-For")[0]
    else:
        ip = request.remote_addr
    if ip == "127.0.0.1" :
        ip = "45.240.198.19"
    
    country = requests.get("http://ip-api.com/json/" + ip).json()["country"]
    currency = CountryInfo(country).currencies()[0]
    listings[listingId] = {
        "title": title,
        "description": description,
        "condition": condition,
        "price": price,
        "currency": currency,
        "id": listingId,
        "imageType": imageTypes,
        "owner": request.cookies.get("name"),
        "category": category,
        "date": date
        # "images": images,
    }
    user_data[request.cookies.get("name")]["listings"].append(listingId)
    reports[listingId] = []
    dumpJson()

    return listingId


@app.route('/search', methods=['POST'])
def search():

    text = request.form.get('text')
    tl = text.lower()
    res = []
    for listing in listings:
        listingl = listings[listing]["title"].lower()
        if listingl in tl or tl.endswith(listingl) or listingl.endswith(tl) or tl.startswith(listingl) or listingl.startswith(tl) or tl == listingl or tl in listingl:
            res.append(listings[listing])
    
    return jsonify({"res":res})


@app.route('/listing/<listingId>')
def lising(listingId):
    if listingId not in listings:
        flash("Listing not found.", category="error")
        return redirect("/")
    
    cookie_name = request.cookies.get("name")
    cookie_pw = request.cookies.get("pw")
    if (
    not cookie_name
    or not cookie_pw
    or user_data[cookie_name]["pw"] != hasher(cookie_pw)
    ):
        return render_template('listing.html', listing=listings[listingId], targetPhone=user_data[listings[listingId]["owner"]]["phone"], logged=False, username=cookie_name, pw=cookie_pw, r=random.randint(0, 10000))


    return render_template('listing.html', listing=listings[listingId], targetPhone=user_data[listings[listingId]["owner"]]["phone"] , logged=True, username=cookie_name, pw=cookie_pw, r=random.randint(0, 10000))
            

@app.route('/user/<targetName>')
def user(targetName):
    if targetName not in user_data.keys():
        flash("User not found", category="error")
        return redirect('/')
    phone = user_data[targetName]["phone"]
    targetListings = user_data[targetName]["listings"]
    listingsRes = [listings[l] for l in targetListings]
    if not request.cookies.get("name") or not request.cookies.get("pw"):
        return render_template("profile.html", phone=phone, listings=listingsRes,targetName=targetName,logged=False, r=random.randint(0, 10000))

    return render_template("profile.html", phone=phone, listings=listingsRes,targetName=targetName,logged=True, username=request.cookies.get("name"), pw=request.cookies.get("pw"), r=random.randint(0, 10000))



@app.route('/add-to-fav_listingId=<listingId>')
def addToFav(listingId):
    username = request.cookies.get('name')
    pw = request.cookies.get('pw')

    if hasher(pw) != user_data[username]["pw"]:
        return jsonify({"res": "Wrong password"})

    if listingId in listings.keys() and listingId not in user_data[username]["favs"]: 
        user_data[username]["favs"].append(listingId)
        dumpJson()
        return jsonify({"res": "success"})
    else:
        return jsonify({"res":"listing not found"})

@app.route('/remove-from-fav_listingId=<listingId>')
def removeFromFav(listingId):
    username = request.cookies.get('name')
    pw = request.cookies.get('pw')

    if hasher(pw) != user_data[username]["pw"]:
        return jsonify({"res": "Wrong password"})

    if listingId in listings and listingId in user_data[username]["favs"]: 
        user_data[username]["favs"].remove(listingId)
        dumpJson()
        return jsonify({"res": "success"})
    else:
        return jsonify({"res":"listing not found"})


@app.route('/get-my-favs')
def getMyFavs():
    pw = request.cookies.get('pw')
    username = request.cookies.get('name')
    if hasher(pw) == user_data[username]["pw"]:
        return jsonify({"res": user_data[username]["favs"]})
    else:
        return jsonify({"res": "wrong password"}) 


@app.route('/favorites')
def favorites():
    cookie_name = request.cookies.get('name')
    cookie_pw = request.cookies.get('pw')
    if cookie_name and cookie_pw:
        try:
            if user_data[cookie_name]['pw'] == hasher(cookie_pw):
                favListings = []
                for listing in user_data[cookie_name]['favs']:
                    favListings.append(listings[listing])
                

                return render_template("favorites.html", favListings=favListings,logged=True, username=cookie_name, pw=cookie_pw, r=random.randint(0, 10000))
            else:
                flash("Please login first", category="error")
                return redirect('/')
        except KeyError:
                flash("Please login first", category="error")
                return redirect('/')
    else:
                flash("Please login first", category="error")
                return redirect('/') 

@app.route("/search-with-category_cat=<category>")
def search_with_category(category):
    res = []
    for listing in listings:
        if listings[listing]["category"] == category:
            res.append(listings[listing])
    return jsonify({"res": res})



@app.route('/remove-listing_id=<id>')
def removeListing(id):
    pw = request.cookies.get('pw')
    username = request.cookies.get('name')
    print(pw, username)
    if hasher(pw) != user_data[username]["pw"]:
        return jsonify({"res":"wrong password"})
    if id not in listings.keys():
        return jsonify({"res":"listing not found"})

    for _ in range(len(listings[id]["imageType"])):
        try:
            shutil.rmtree("./static/listing_images/" + id )
        except:
            pass
    user_data[username]["listings"].remove(id)
    del listings[id]
    for user in user_data:
        if id in user_data[user]["favs"]:
            user_data[user]["favs"].remove(id)
    dumpJson()
    return jsonify({"res":"success"})



@app.route('/change-pfp', methods=['POST'])
def changePfp():
    username = request.cookies.get('name')
    pw = request.cookies.get('pw')
    if hasher(pw) == user_data[username]["pw"]:
        newPfp = request.files["image"]
        newPfp.save("static/pfps/" +username + os.path.splitext(newPfp.filename)[1])
        # user_data[username]["pfp"] = "/static/pfp/" + username + os.path.splitext(newPfp.filename)[1]
        return "success"
    else:
        return "wrong password"



@app.route('/chats')
def chatsPage():
    username = request.cookies.get("name")
    pw = request.cookies.get("pw")

    if  username and  pw:
        if hasher(pw) == user_data[username]["pw"]:
            userChats = getUserChats(username)
            print(userChats)
       
            return render_template("chats.html", logged=True, username=username ,pw=pw, chats=userChats,r=random.randint(0, 10000))
        flash("Wrong password", category="error")
    else:
        flash("Please login first", category="error")

    return redirect("/")



@app.route('/add-user-to-chat_user=<targetName>')
def addUserToChat(targetName):
    username = request.cookies.get('name')
    pw = request.cookies.get('pw')

    if hasher(pw) == user_data[username]["pw"]:
        userChats = getUserChats(username)
        print(userChats)
        if targetName in "".join(userChats.keys()):
            return redirect("/chats#" + targetName)
        chats[f"{username}${targetName}"] = []
        dumpJson()
        return redirect("/chats#" + targetName)

    else:
        flash("wrong password", category="error")
        return redirect("/")    



@app.route('/send-message_user=<targetName>', methods=['POST'])
def sendMessage(targetName):
    username = request.cookies.get('name')
    pw = request.cookies.get('pw')
    message = request.form.get('message')

    if hasher(pw) == user_data[username]["pw"]:
        for chat in chats:
            chat = chat.split("$")
            if username in chat and targetName in chat:
                chats["$".join(chat)].append([username, message])
        dumpJson()
        return "sent"
    else:
        return "wrong password"


@app.route('/get-my-messages')
def getMyMessages():
    username = request.cookies.get('name')
    pw = request.cookies.get('pw')
    
    if hasher(pw) == user_data[username]['pw']:
        return jsonify(getUserChats(username))
    else:
        return "wrong password"



@app.route('/send-report', methods=['POST'])
def send_report():
    username = request.cookies.get("name")
    pw = request.cookies.get("pw")
    reason = request.form.get("reason")
    moreInfo = request.form.get("moreInfo")
    listingId = request.form.get("listingId")

    if len(moreInfo) == 0 or len(reason) == 0:
        return "cannot be empty"
    if hasher(pw) == user_data[username]["pw"]:
        reports[listingId].append({
            "reason": reason,
            "info": moreInfo,
            "date": datetime.datetime.now().strftime("%Y-%m-%d"),
            "from": username
        })
        dumpJson()
        return "success"
    else:
        return "wrong password"





@app.route('/about')
def about():
    cookie_name = request.cookies.get('name')
    cookie_pw = request.cookies.get('pw')
    if cookie_name and cookie_pw:
        try:
            if user_data[cookie_name]['pw'] == hasher(cookie_pw):
                return render_template("about.html", logged=True, username=cookie_name, pw=cookie_pw, r=random.randint(0, 10000))
            else:
                return render_template("about.html",  logged=False, r=random.randint(0, 10000))
        except KeyError:
            return render_template("about.html",   logged=False, r=random.randint(0, 10000))
    else:
        return render_template("about.html",  logged=False, r=random.randint(0, 10000))
    

@app.route('/get-chat-length')
def get_chat_length():
        username = request.cookies.get("name")
        pw = request.cookies.get("pw")
     
        if hasher(pw) == user_data[username]["pw"]:
            res = 0
            for chat in chats:
                if username in chat.split("$"):
                    res += len(chats[chat])
            return jsonify({"res":res})


        else:
            return "wrong password"
    
@app.route('/search-users_q=<q>')
def search_users(q):
    tl = q.lower()
    res = []
    for user in user_data:
        userl = user.lower()
        if userl in tl or tl.endswith(userl) or userl.endswith(tl) or tl.startswith(userl) or userl.startswith(tl) or tl == userl or tl in userl:
            
            res.append(user)

    return jsonify({"res":res})

    



@app.route('/flash=<flashMessage>_url=<url>')
def customFlash(flashMessage, url):
    print(url)
    flash(flashMessage)
    url = "/" if url == "EMPTY" else "/" + url.replace("SLASH", "/")

    return redirect(url)


    
@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404





app.run(host='localhost', port=8000, debug=True)
